/*globals chai, spooks, require, tryer, suite, setup, test, setTimeout, Promise */

(function (require, spooks) {
  'use strict';

  var assert, modulePath;

  if (require === undefined) {
    assert = chai.assert;
    require = function () { return tryer; };
  } else {
    assert = require('chai').assert;
    spooks = require('spooks');
    modulePath = '../src/tryer';
  }
  
  suite('tryer:', function () {
    test('require does not throw', function () {
      assert.doesNotThrow(function () {
        require(modulePath);
      });
    });
  
    suite('require:', function () {
      var tryer;
  
      setup(function () {
        tryer = require(modulePath);
      });
  
      test('function is exported', function () {
        assert.isFunction(tryer);
      });
  
      test('tryer does not throw when options is missing', function () {
        assert.doesNotThrow(function () {
          tryer();
        });
      });
  
      test('tryer does not throw when options is object', function () {
        assert.doesNotThrow(function () {
          tryer({});
        });
      });
  
      suite('when passing immediately:', function () {
        var log, predicate, action, fail, pass;
  
        setup(function (done) {
          log = {};
          predicate = spooks.fn({ name: 'predicate', log: log, results: [ true ] });
          action = spooks.fn({ name: 'action', log: log });
          fail = spooks.fn({ name: 'fail', log: log, callback: done });
          pass = spooks.fn({ name: 'pass', log: log, callback: done });
          tryer({
            when: predicate,
            action: action,
            fail: fail,
            pass: pass,
            interval: 0,
            limit: 3
          });
        });
  
        test('predicate was called once', function () {
          assert.strictEqual(log.counts.predicate, 1);
        });
  
        test('action was called once', function () {
          assert.strictEqual(log.counts.action, 1);
        });
  
        test('fail was not called', function () {
         